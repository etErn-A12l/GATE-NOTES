{"assets":[{"title":"Matrix Restore","id":"9eb0961b-85d1-4bd4-b013-9d8e6d68ddef","type":"CODE","raw":"def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:\n        col_sum = colSum\n        row_sum = rowSum\n\n        mat = [[0]*len(col_sum) for i in range(len(row_sum))]\n        i = 0\n        j = 0\n        while i < len(row_sum) and j < len(col_sum):\n            mat[i][j] = min(row_sum[i], col_sum[j])\n            if row_sum[i] == col_sum[j]:\n                i += 1\n                j += 1\n            elif row_sum[i] > col_sum[j]:\n                row_sum[i] -= col_sum[j]\n                j += 1\n            else:\n                col_sum[j] -= row_sum[i]\n                i += 1\n\n        return mat","language":"py","time":"23 days ago","created":"2024-07-20T09:48:58.458Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"ba237af7-ef56-4d4f-ab35-838d38703cab","created":{"value":"2024-07-20T09:48:58.896Z","readable":"23 days ago"},"updated":{"value":"2024-07-20T09:48:58.896Z","readable":"23 days ago"},"mechanism":"AUTOMATIC","asset":{"id":"9eb0961b-85d1-4bd4-b013-9d8e6d68ddef"},"type":"DESCRIPTION","text":"This code snippet defines a method called \"restoreMatrix\" that takes in two vectors, row sum and colsum as input. It calculates the minimum number of rows needed to be removed from each vector based on their values (row_sum), where all","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}}],"updated":"2024-07-20T09:49:14.759Z"},{"title":"React Component for Fetching Data Periodically with Axios","id":"8df6b47a-f9c5-4525-8366-e9468dc4bb0e","type":"CODE","raw":"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\ninterface Data {\n  // Define the structure of your data here\n  id: number;\n  name: string;\n}\n\nconst FetchDataComponent: React.FC = () => {\n  const [data, setData] = useState<Data[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Data[]>('https://api.example.com/data');\n      setData(response.data);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to fetch data');\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch data immediately on component mount\n    fetchData();\n\n    // Set up the interval to fetch data periodically\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 5000); // Fetch data every 5 seconds\n\n    // Clean up the interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <div>\n      <h1>Fetched Data</h1>\n      <ul>\n        {data.map(item => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FetchDataComponent;","language":"ts","time":"about a month ago","created":"2024-06-25T05:46:50.619Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"0ebcbf6c-045c-4e11-a901-72de517593da","created":{"value":"2024-06-25T05:46:50.619Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:46:50.619Z","readable":"about a month ago"},"mechanism":"MANUAL","asset":{"id":"8df6b47a-f9c5-4525-8366-e9468dc4bb0e"},"type":"COMMENT","text":"The provided code sample demonstrates how to fetch data periodically in a React TypeScript application using the `useEffect` hook and `setInterval`. It includes a functional component `FetchDataComponent` that fetches data from an API endpoint every 5 seconds, updates the state, and renders the fetched data. The useEffect hook is used to set up and clean up the interval, while axios is used for data fetching. This approach ensures the data is fetched periodically and prevents memory leaks by handling the cleanup on component unmount."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"75425e3d-fcb8-4df8-a42b-5ce4decc1e78","created":{"value":"2024-06-25T05:46:51.394Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:46:51.394Z","readable":"about a month ago"},"mechanism":"AUTOMATIC","asset":{"id":"8df6b47a-f9c5-4525-8366-e9468dc4bb0e"},"type":"DESCRIPTION","text":"This code snippet defines a React component called FetchDataComponent that fetches data from an API using Axios. It uses the useEffect hook to handle loading and error state, as well as handling ajax requests for fetching data immediately on components mount","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"ce03dce8-5121-4248-8a56-e9f511e3bbb3","created":{"value":"2024-06-25T05:47:03.491Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:47:03.491Z","readable":"about a month ago"},"mechanism":"AUTOMATIC","asset":{"id":"8df6b47a-f9c5-4525-8366-e9468dc4bb0e"},"type":"DESCRIPTION","text":"A React functional component that fetches data from an API periodically using Axios and displays it.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}}],"updated":"2024-06-25T05:47:22.477Z"},{"title":"Asynchronous Data Fetching with Axios and Promises","id":"c2618c9d-80f0-46e3-b9c4-a5614f64b90a","type":"CODE","raw":"import axios from 'axios';\n\nconst fetchDataForIds = async (ids) => {\n  try {\n    // Create an array of promises\n    const promises = ids.map(id => axios.get(`https://api.example.com/data/${id}`));\n\n    // Wait for all promises to resolve\n    const responses = await Promise.all(promises);\n\n    // Extract data from each response\n    const data = responses.map(response => response.data);\n\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n};\n\n// Example usage\nconst ids = [1, 2, 3, 4, 5];\nfetchDataForIds(ids)\n  .then(data => console.log('Fetched data:', data))\n  .catch(error => console.error('Error:', error));","language":"js","time":"about a month ago","created":"2024-06-25T05:46:36.094Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"6e50818a-c25d-4790-9070-0d09b2c4c4f3","created":{"value":"2024-06-25T05:46:58.121Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:46:58.121Z","readable":"about a month ago"},"mechanism":"AUTOMATIC","asset":{"id":"c2618c9d-80f0-46e3-b9c4-a5614f64b90a"},"type":"DESCRIPTION","text":"A JavaScript function using Axios to fetch data asynchronously for given IDs using promises.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"92d761ee-736b-4244-afe1-74ab5fd669d2","created":{"value":"2024-06-25T05:46:48.417Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:46:48.417Z","readable":"about a month ago"},"mechanism":"AUTOMATIC","asset":{"id":"c2618c9d-80f0-46e3-b9c4-a5614f64b90a"},"type":"DESCRIPTION","text":"The code snippet defines a function called `fetchDataForIds` that takes an array of IDs as input. It uses the Axios library to fetch data from each ID and extracts it from all responses, then logs \"Fetched data\" along with any errors encountered during","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"9bd7cd0f-4555-4beb-b411-439852206df7","created":{"value":"2024-06-25T05:46:36.094Z","readable":"about a month ago"},"updated":{"value":"2024-06-25T05:46:36.094Z","readable":"about a month ago"},"mechanism":"MANUAL","asset":{"id":"c2618c9d-80f0-46e3-b9c4-a5614f64b90a"},"type":"COMMENT","text":"The conversation involved discussing how to handle multiple asynchronous requests in JavaScript using `Promise.all`. The example demonstrated a function that maps over a list of IDs, fetches data from an API for each ID using `axios`, and returns the results. \n\nKey points:\n1. Mapping IDs to promises and handling multiple promises with `Promise.all`.\n2. Extracting data from API responses and error handling.\n3. The example showcased the async/await pattern and demonstrated how to improve performance by making concurrent API requests."}],"updated":"2024-06-25T05:47:07.208Z"},{"title":"Dashboard Component with AuthLayout and ServerSideProps","id":"ee25872c-db2f-4962-a5ca-1a7a0bd1bf5d","type":"CODE","raw":"// pages/dashboard.tsx\nimport AuthLayout, { getServerSideProps } from '../components/AuthLayout';\n\nconst Dashboard = () => {\n  return (\n    <AuthLayout>\n      <div>Dashboard Content</div>\n    </AuthLayout>\n  );\n};\n\nexport { getServerSideProps };\nexport default Dashboard;","language":"ts","time":"3 months ago","created":"2024-05-22T18:59:55.192Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"7f47421a-c1bd-4ffe-99a0-5fa4b22c8134","created":{"value":"2024-05-22T18:59:55.192Z","readable":"3 months ago"},"updated":{"value":"2024-05-22T18:59:55.192Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"ee25872c-db2f-4962-a5ca-1a7a0bd1bf5d"},"type":"COMMENT","text":"The provided code sample and discussion demonstrate how to implement server-side authentication checks in a Next.js 14 application by wrapping routes with a layout component. The layout component uses `getServerSideProps` to verify authentication before rendering the page. Additionally, API routes can be used for token verification to enhance security. This approach ensures that only authenticated users can access protected routes and emphasizes the secure handling of cookies."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"ff727b70-ec61-409d-a09c-4bf57bce4f0e","created":{"value":"2024-05-22T18:59:55.192Z","readable":"3 months ago"},"updated":{"value":"2024-05-22T18:59:55.192Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"ee25872c-db2f-4962-a5ca-1a7a0bd1bf5d"},"type":"DESCRIPTION","text":"This code snippet exports a React component called Dashboard that renders the \"Dashboard Content\" div inside it. It also includes props for setting up authentication layout, and provides methods to get server side properties in an application's own dashboard content.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}}],"updated":"2024-05-22T18:59:55.224Z"},{"title":"Token Verification API Endpoint using Axios in Next.js","id":"39c4d4b2-f584-4c2f-bf9f-8deaa7bd5bbe","type":"CODE","raw":"// pages/api/verify-token.ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport axios from 'axios';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const token = req.cookies.token;\n\n  if (!token) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  try {\n    const response = await axios.get('http://your-rust-backend.com/verify-token', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (response.status === 200) {\n      return res.status(200).json({ message: 'Token is valid' });\n    } else {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n  } catch (error) {\n    return res.status(500).json({ message: 'Internal Server Error' });\n  }\n}","language":"ts","time":"3 months ago","created":"2024-05-22T18:20:12.654Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"3845174b-f313-4ca0-bde6-c3c150738e9d","created":{"value":"2024-05-22T18:20:12.654Z","readable":"3 months ago"},"updated":{"value":"2024-05-22T18:20:12.654Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"39c4d4b2-f584-4c2f-bf9f-8deaa7bd5bbe"},"type":"DESCRIPTION","text":"This code snippet defines a function called \"handler\" that handles the request and response of an API. It checks if it is not empty, then uses axios to verify its token by making HTTP GET requests to your Rust backend for verification using","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"8229ee9f-e9f6-45ff-b241-2d5cee83f313","created":{"value":"2024-05-22T18:20:21.526Z","readable":"3 months ago"},"updated":{"value":"2024-05-22T18:20:21.526Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"39c4d4b2-f584-4c2f-bf9f-8deaa7bd5bbe"},"type":"DESCRIPTION","text":"An API endpoint in Next.js that verifies a token by sending it to a Rust backend using Axios.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"b1c110aa-5190-49fb-a19d-3b1e14a599ff","created":{"value":"2024-05-22T18:20:12.654Z","readable":"3 months ago"},"updated":{"value":"2024-05-22T18:20:12.654Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"39c4d4b2-f584-4c2f-bf9f-8deaa7bd5bbe"},"type":"COMMENT","text":"The conversation provided a detailed guide on leveraging server features in Next.js 14 to protect routes effectively using Middleware and API Routes. It includes code examples demonstrating how to implement Middleware for route protection, create API Routes for token verification, and use Middleware to protect specific pages or groups. This approach ensures that only authenticated users can access protected routes within a Next.js application."}],"updated":"2024-05-22T18:22:56.120Z"},{"title":"Filtering Objects in an Array by Color","id":"2abbb8cc-c1d0-4bf3-bcec-386c615664cf","type":"CODE","raw":"let objectsArray = [\n  {color: 'red', size: 'large'},\n  {color: 'blue', size: 'medium'},\n  {color: 'green', size: 'small'},\n  {color: 'yellow', size: 'large'}\n];\n\nlet colorArray = ['red', 'green'];\n\nlet filteredArray = objectsArray.filter(obj => colorArray.includes(obj.color));\n\nconsole.log(filteredArray);","language":"js","time":"4 months ago","created":"2024-04-09T20:33:32.343Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"1cdc5a92-cd59-4b7b-bc57-067b8cad39e1","created":{"value":"2024-04-09T20:33:32.343Z","readable":"4 months ago"},"updated":{"value":"2024-04-09T20:33:32.343Z","readable":"4 months ago"},"mechanism":"MANUAL","asset":{"id":"2abbb8cc-c1d0-4bf3-bcec-386c615664cf"},"type":"COMMENT","text":"The code sample demonstrates the usage of the `filter()` method in JavaScript to filter out objects from an array based on a condition. In this case, objects with colors matching those in a separate color array are included in the filtered array. This conversation explained how to use the `filter()` method and provided an example illustrating the process."},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"62caf85c-3085-45d9-a168-0efb8c991d94","created":{"value":"2024-04-09T20:33:32.343Z","readable":"4 months ago"},"updated":{"value":"2024-04-09T20:33:32.343Z","readable":"4 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"2abbb8cc-c1d0-4bf3-bcec-386c615664cf"},"type":"DESCRIPTION","text":"The code snippet filters an array of objects based on their color and size. It then logs the filtered array to the console. The filtered array is then logged to the console.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"b71ea3a8-09db-460a-8951-413aed555e1e","created":{"value":"2024-04-09T20:33:43.362Z","readable":"4 months ago"},"updated":{"value":"2024-04-09T20:33:43.362Z","readable":"4 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"2abbb8cc-c1d0-4bf3-bcec-386c615664cf"},"type":"DESCRIPTION","text":"Filtering an array of objects based on a specific property value using the Array filter method.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}}],"updated":"2024-04-18T12:30:42.071Z"},{"title":"Styling Input Fields for Webkit Autofill","id":"49b9bb12-66eb-4bd6-8148-a7b9bb01865c","type":"CODE","raw":"input:-webkit-autofill,\ninput:-webkit-autofill:hover, \ninput:-webkit-autofill:focus, \ninput:-webkit-autofill:active  {\n    -webkit-box-shadow: 0 0 0 30px white inset !important;\n    color: black !important;\n}","language":"css","time":"4 months ago","created":"2024-04-08T06:07:23.374Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"4626ede2-981c-4ad5-9348-1607ccb4f58a","created":{"value":"2024-04-08T06:07:23.374Z","readable":"4 months ago"},"updated":{"value":"2024-04-08T06:07:23.374Z","readable":"4 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"49b9bb12-66eb-4bd6-8148-a7b9bb01865c"},"type":"DESCRIPTION","text":"This code snippet sets the background color of an input element to black, and applies a white box shadow if it is not active.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"a45c7ada-18f4-4546-b305-4319acd7810c","created":{"value":"2024-04-08T06:07:33.641Z","readable":"4 months ago"},"updated":{"value":"2024-04-08T06:07:33.641Z","readable":"4 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"49b9bb12-66eb-4bd6-8148-a7b9bb01865c"},"type":"DESCRIPTION","text":"CSS code snippet to style input fields specifically for Webkit autofill feature.","model":{"id":"1e17215c-07fc-44ca-b278-841d0c8e7189"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"b3c2e231-c7b9-41fe-b6c8-c4b0b4e35f6a","created":{"value":"2024-04-08T06:07:23.374Z","readable":"4 months ago"},"updated":{"value":"2024-04-08T06:07:23.374Z","readable":"4 months ago"},"mechanism":"MANUAL","asset":{"id":"49b9bb12-66eb-4bd6-8148-a7b9bb01865c"},"type":"COMMENT","text":"The conversation provided a workaround for changing the autofill background color and text color in a form field using plain CSS in Tailwind CSS. The solution involves targeting the `-webkit-autofill` pseudo-classes and setting the desired colors. As Tailwind CSS does not natively support this feature, the CSS code needs to be added to the stylesheet after importing Tailwind CSS for it to take effect."}],"updated":"2024-04-18T03:01:27.735Z"}],"gptContexts":[],"gptFolderNames":[],"enrichedCode":{},"migration":1,"remoteCopilotState":""}